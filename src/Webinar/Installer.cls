Class Webinar.Installer Extends %RegisteredObject
{

Parameter Namespace = "WEBINAR";

XData Install [ XMLNamespace = INSTALLER ]
{
<Manifest> 
        <Log Text="Creating namespace ${Namespace}" Level="0"/> 
        <Namespace Name="${Namespace}" Create="yes" Code="${Namespace}-APP" Ensemble="" Data="USER"> 
            <Configuration> 
                <Database Name="${Namespace}-APP" Dir="/opt/webinar/db/webinar" Create="yes" MountRequired="true" Resource="%DB_DEFAULT" PublicPermissions="RW" MountAtStartup="true"/> 
            </Configuration> 
            <Import File="/opt/webinar/src/" Recurse="1" Flags="cuk" />
            <Invoke Class="Webinar.Data.Team" Method="Populate" CheckStatus="true">
                <Arg Value="10"/>
            </Invoke>
            <Invoke Class="Webinar.Data.Player" Method="Populate" CheckStatus="true">
                <Arg Value="100"/>
            </Invoke>
        </Namespace> 
        <Namespace Name="%SYS" Create="no">
            <Invoke Class="Security.Roles" Method="Import" CheckStatus="true">
                <Arg Value="/opt/webinar/install/Webinar-Role.xml"/>
            </Invoke>
            <Invoke Class="Security.Applications" Method="Import" CheckStatus="true">
                <Arg Value="/opt/webinar/install/webapp-leaderboard-api-v1.xml"/>
            </Invoke>
            <Invoke Class="Security.Users" Method="Import" CheckStatus="true">
                <Arg Value="/opt/webinar/install/user-iam.xml"/>
            </Invoke>
            <Invoke Class="Security.Applications" Method="Import" CheckStatus="true">
                <Arg Value="/opt/webinar/install/webapp-iam.xml"/>
            </Invoke>
        </Namespace>
    </Manifest>
}

/// This is a method generator whose code is generated by XGL. 
/// Main setup method
ClassMethod RunManifest(ByRef pVars, pLogLevel As %Integer = 0, pInstaller As %Installer.Installer) As %Status [ CodeMode = objectgenerator, Internal ]
{
    Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "Install")
}

/// Entry point    
ClassMethod Run() As %Status
{
    try { 
        write "START INSTALLER",! 
        set vars("Namespace") = ..#Namespace 
        set sc = ..RunManifest(.vars) 
        if sc {
            write !,"INSTALLER SUCCESS",!
        } else {
            do $SYSTEM.Process.Terminate($JOB,1)
        }
    } catch ex { 
        set sc = ex.AsStatus() 
        write $System.Status.GetErrorText(sc),! 
        do $SYSTEM.Process.Terminate($JOB,1) 
    } 
    quit sc
}

}
